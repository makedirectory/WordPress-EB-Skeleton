###############################################################################
## After you launch your environment, set unique values for these properties
## using the EB CLI's 'eb setenv' command, or the software settings screen in
## Configuration menu for your environment in the Elastic Beanstalk management
## console. Settings using these methods will override the values set in this
## file, and will not be visible in your source code.
##
## You need to set you WordPress Username (WP_USER), Title (WP_TITLE), and
## Host (HTTP_HOST). If you would like a random password generated, comment out
## line 129 `--admin_password=$WP_PASS \`. You can find the password after the first
## deploy at the bottom of '/var/logs/eb-activity.log'.
##
## Example: Admin password: XxXxXxXxXxXxXxXxXxX
##          Success: WordPress installed successfully.
##          Installed WordPress!
##
###############################################################################

option_settings:
  aws:elasticbeanstalk:application:environment:
    AUTH_KEY: 'test'
    SECURE_AUTH_KEY: 'test'
    LOGGED_IN_KEY: 'test'
    LOGGED_IN_SALT: 'test'
    NONCE_KEY: 'test'
    AUTH_SALT: 'test'
    SECURE_AUTH_SALT: 'test'
    NONCE_SALT: 'test'
    HTTP_HOST: 'example.com'
    WP_USER: 'admin'
    WP_TITLE: 'Site Title'
    WP_PASS: 'test'
  aws:elasticbeanstalk:container:php:phpini:
    memory_limit: 1024M

packages:
  yum:
    mod24_ssl: []
    kernel-devel: []
    gcc: []
    gcc-c++: []
    php73-devel: []
    php7-pear: []
    ImageMagick: []
    ImageMagick-devel: []

commands:
  01_install_imagick:
    command: 'echo | sudo pecl7 install imagick'
  02_restart_httpd:
    command: 'sudo service httpd restart'
  02_install_wp_cli:
    command: 'curl https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -o /usr/local/bin/wp'
  03_chmod_wp_cli:
    command: 'chmod +x /usr/local/bin/wp'

files:
  "/opt/elasticbeanstalk/hooks/appdeploy/post/01_set_env.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      echo '<?php
      define('DB_NAME', "'$(/opt/elasticbeanstalk/bin/get-config environment -k RDS_DB_NAME)'" );
      define('DB_USER', "'$(/opt/elasticbeanstalk/bin/get-config environment -k RDS_USERNAME)'" );
      define('DB_PASSWORD', "'$(/opt/elasticbeanstalk/bin/get-config environment -k RDS_PASSWORD)'" );
      define('DB_HOST', "'$(/opt/elasticbeanstalk/bin/get-config environment -k RDS_HOSTNAME)'" );
      define('AUTH_KEY', "'$(/opt/elasticbeanstalk/bin/get-config environment -k AUTH_KEY)'"  );
      define('SECURE_AUTH_KEY', "'$(/opt/elasticbeanstalk/bin/get-config environment -k SECURE_AUTH_KEY)'" );
      define('LOGGED_IN_KEY', "'$(/opt/elasticbeanstalk/bin/get-config environment -k LOGGED_IN_KEY)'" );
      define('NONCE_KEY', "'$(/opt/elasticbeanstalk/bin/get-config environment -k NONCE_KEY)'" );
      define('AUTH_SALT', "'$(/opt/elasticbeanstalk/bin/get-config environment -k AUTH_SALT)'" );
      define('SECURE_AUTH_SALT', "'$(/opt/elasticbeanstalk/bin/get-config environment -k SECURE_AUTH_SALT)'" );
      define('LOGGED_IN_SALT', "'$(/opt/elasticbeanstalk/bin/get-config environment -k LOGGED_IN_SALT)'" );
      define('NONCE_SALT', "'$(/opt/elasticbeanstalk/bin/get-config environment -k NONCE_SALT)'" );' > /var/app/current/eb-setup.php

      chown webapp:webapp /var/app/current/eb-setup.php
      chmod 755 /var/app/current/eb-setup.php

      if [ ! -d /home/webapp ]; then
        sudo mkdir /home/webapp
        sudo chown -R webapp:webapp /home/webapp
      fi

      if [ ! -d /home/webapp/.wp-cli ]; then
        sudo mkdir /home/webapp/.wp-cli
        sudo chown -R webapp:webapp /home/webapp/.wp-cli
      fi

      if [ ! -d /home/webapp/.wp-cli/cache ]; then
        sudo mkdir /home/webapp/.wp-cli/cache
        sudo mkdir /home/webapp/.wp-cli/cache/core
        sudo chown -R webapp:webapp /home/webapp/.wp-cli/cache
        sudo chmod 777 /home/webapp/.wp-cli/cache
      fi

      #chown -R webapp:webapp /var/app/current
      #chmod 777 /var/app/current

  "/opt/elasticbeanstalk/hooks/appdeploy/post/02_wp_install.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      WP_CLI_CACHE_DIR=/home/webapp/.wp-cli/cache/
      DIR=/var/app/current/wp

      # These might not be passed into next script
      HTTP_HOST=$(/opt/elasticbeanstalk/bin/get-config environment -k HTTP_HOST)
      WP_USER=$(/opt/elasticbeanstalk/bin/get-config environment -k WP_USER)
      WP_PASS=$(/opt/elasticbeanstalk/bin/get-config environment -k WP_PASS)
      WP_TITLE=$(/opt/elasticbeanstalk/bin/get-config environment -k WP_TITLE)

      if [ "$(ls -A $DIR)" ]; then
        printf "WordPress Already Downloaded.\n"
      else
        sudo -u webapp /usr/local/bin/wp core download --path=/var/app/current/wp
        printf "WordPress Downloaded.\n"
      fi

      # Only install if WP is not installed
      if [ -f /var/app/current/eb-setup.php ]; then
        sudo -u webapp /usr/local/bin/wp core is-installed
        INSTALLED_RESULT=$?
        if [ "$INSTALLED_RESULT" -eq 0 ]; then
          printf "WordPress Already Installed.\n"
        else
          ## Still complains abput path when set to /var/app/current/wp
          sudo -u webapp /usr/local/bin/wp core install \
          --path=/var/app/current/wp \
          --admin_email=name@example.com \
          --url=$HTTP_HOST \
          --title=$WP_TITLE \
          --admin_user=$WP_USER \
          --admin_password=$WP_PASS
          INSTALL_RESULT=$?
          if [ "$INSTALL_RESULT" -eq 0 ]; then
            printf "Installed WordPress!\n"
          else
            printf "Failed to Install WordPress!\n"
          fi
        fi
      fi

      if [ ! -d /var/app/current/wp-admin ]; then
        sudo -u webapp ln -s wp/wp-admin .
        LINK_RESULT=$?
        if [ "$LINK_RESULT" -eq 0 ]; then
          printf "Successfully added symbolic link.\n"
        else
          printf "Failed to add symbolic link.\n"
        fi
      fi

  "/opt/elasticbeanstalk/hooks/appdeploy/post/03_clean_up.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      # Delete the eb-setup.php file
      if [ -f /var/app/current/eb-setup.php ]; then
          rm -f /var/app/current/eb-setup.php
          DELETE_RESULT=$?
          if [ "$DELETE_RESULT" -eq 0 ]; then
            printf "eb-setup.php removed.\n"
          else
            printf "Failed to remove eb-setup.php.\n"
          fi
      fi
